import socket
import threading
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import AES
from base64 import b64encode, b64decode
from getpass import getpass

HEADER = 64
PORT = 5050
SERVER = socket.gethostbyname(socket.gethostname())
ADDR = (SERVER, PORT)
FORMAT = 'utf-8'
DISCONNECT_MESSAGE = "!DISCONNECT"

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(ADDR)


def handle_client(conn, addr):
    print(f"[NEW CONNECTION] {addr} connected.")
    connected = True
    while connected:
        msg_length = conn.recv(HEADER).decode(FORMAT)
        if msg_length:
            msg_length = int(msg_length)
            print(msg_length)
            msg = conn.recv(msg_length).decode(FORMAT)
            if msg == DISCONNECT_MESSAGE:
                connected = False

            print(f"[{addr}] {msg}")
            #receive(msg)
            key = getpass('Please Insert the Password = ')
            key = key.encode('UTF-8')
            key = pad(key, AES.block_size)

            try:

                # data = entry.read()
                length = len(msg)
                iv = msg[:24]
                iv = b64decode(iv)
                ciphertext = msg[24:length]
                ciphertext = b64decode(ciphertext)
                cipher = AES.new(key, AES.MODE_CFB, iv)
                decrypted = cipher.decrypt(ciphertext)
                decrypted = unpad(decrypted, AES.block_size)
                with open('13.jpeg', 'wb') as data:
                    data.write(decrypted)
                data.close()
            except (ValueError, KeyError):
                print('Wrong Password')
            conn.send("Msg received".encode(FORMAT))

    conn.close()
threads = []
def start():
    server.listen()
    print(f"[LISTENING] Server is listening on {SERVER}")
    while True:
        conn, addr = server.accept()
        thread = threading.Thread(target=handle_client, args=(conn, addr))
        thread.start()
        threads.append(thread)
        print(f"[ACTIVE CONNECTIONS] {threading.activeCount() - 1}")


for the in threads:
   the.join()

print("[STARTING] server is starting...")
start()
